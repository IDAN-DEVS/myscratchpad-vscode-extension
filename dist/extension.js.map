{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://myscratchpad/./src/models/scratchFile.ts","webpack://myscratchpad/./src/extension.ts","webpack://myscratchpad/./src/services/scratchpadService.ts","webpack://myscratchpad/external commonjs \"vscode\"","webpack://myscratchpad/./src/models/scratchpadProvider.ts","webpack://myscratchpad/external node-commonjs \"fs\"","webpack://myscratchpad/external node-commonjs \"path\"","webpack://myscratchpad/webpack/bootstrap","webpack://myscratchpad/webpack/startup"],"sourcesContent":["export interface IScratchFile {\n  name: string;\n  extension: string;\n  path: string;\n  created: number;\n  lastModified: number;\n}\n\nexport enum FileTypeEnum {\n  JavaScript = \"js\",\n  TypeScript = \"ts\",\n  HTML = \"html\",\n  CSS = \"css\",\n  JSON = \"json\",\n  Markdown = \"md\",\n  Text = \"txt\",\n  SQL = \"sql\",\n  Custom = \"custom\",\n}\n\nexport const fileTypeLabels: Record<FileTypeEnum, string> = {\n  [FileTypeEnum.JavaScript]: \"JavaScript\",\n  [FileTypeEnum.TypeScript]: \"TypeScript\",\n  [FileTypeEnum.HTML]: \"HTML\",\n  [FileTypeEnum.CSS]: \"CSS\",\n  [FileTypeEnum.JSON]: \"JSON\",\n  [FileTypeEnum.Markdown]: \"Markdown\",\n  [FileTypeEnum.Text]: \"Plain Text\",\n  [FileTypeEnum.SQL]: \"SQL\",\n  [FileTypeEnum.Custom]: \"Custom File\",\n};\n\nexport const getFileTypeIcon = (extension: string): string => {\n  switch (extension) {\n    case FileTypeEnum.JavaScript:\n      return \"symbol-method\";\n    case FileTypeEnum.TypeScript:\n      return \"symbol-interface\";\n    case FileTypeEnum.HTML:\n      return \"browser\";\n    case FileTypeEnum.CSS:\n      return \"symbol-color\";\n    case FileTypeEnum.JSON:\n      return \"symbol-object\";\n    case FileTypeEnum.Markdown:\n      return \"markdown\";\n    case FileTypeEnum.SQL:\n      return \"database\";\n    case FileTypeEnum.Text:\n      return \"file-text\";\n    default:\n      // For custom extensions, return extension-specific icons where available\n      return getCustomFileIcon(extension);\n  }\n};\n\nexport const getCustomFileIcon = (extension: string): string => {\n  const iconMap: { [key: string]: string } = {\n    py: \"symbol-method\",\n    rb: \"ruby\",\n    go: \"go\",\n    java: \"coffee\",\n    c: \"symbol-method\",\n    cpp: \"symbol-method\",\n    cs: \"symbol-class\",\n    php: \"symbol-method\",\n    swift: \"symbol-method\",\n    kt: \"symbol-class\",\n    rs: \"symbol-method\",\n    dart: \"symbol-method\",\n    lua: \"symbol-method\",\n    r: \"graph\",\n    sh: \"terminal\",\n    bash: \"terminal\",\n    ps1: \"terminal\",\n    bat: \"terminal\",\n    yaml: \"symbol-object\",\n    yml: \"symbol-object\",\n    toml: \"symbol-object\",\n    ini: \"gear\",\n    cfg: \"gear\",\n    xml: \"symbol-object\",\n    vue: \"symbol-color\",\n    svelte: \"symbol-color\",\n    jsx: \"symbol-method\",\n    tsx: \"symbol-interface\",\n    scss: \"symbol-color\",\n    sass: \"symbol-color\",\n    less: \"symbol-color\",\n    styl: \"symbol-color\",\n    coffee: \"coffee\",\n    elm: \"symbol-method\",\n    hs: \"symbol-method\",\n    clj: \"symbol-method\",\n    ex: \"symbol-method\",\n    erl: \"symbol-method\",\n    vim: \"gear\",\n    dockerfile: \"package\",\n    tf: \"symbol-object\",\n    hcl: \"symbol-object\",\n    cody: \"robot\",\n    [\"*\"]: \"file-code\",\n  };\n\n  return iconMap[extension.toLowerCase()] || \"file-code\";\n};\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { ScratchpadProvider } from \"./models/scratchpadProvider\";\nimport { ScratchpadService } from \"./services/scratchpadService\";\nimport { IScratchFile } from \"./models/scratchFile\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"MyScratchPad\" is now active!');\n\n  // Create the global scratchpad directory\n  const globalScratchpadDir = path.join(\n    context.globalStorageUri.fsPath,\n    \"scratchFiles\"\n  );\n\n  // Get workspace folder name for unique directory naming\n  let workspaceFolderPath = vscode.workspace.workspaceFolders\n    ? path.basename(vscode.workspace.workspaceFolders[0].uri.fsPath)\n    : \"default\";\n\n  // Create workspace-specific scratchpad directory\n  const workspaceScratchpadDir = vscode.workspace.workspaceFolders\n    ? path.join(\n        context.globalStorageUri.fsPath,\n        \"workspaceScratchFiles\",\n        workspaceFolderPath\n      )\n    : path.join(context.globalStorageUri.fsPath, \"workspaceScratchFiles\");\n\n  // Initialize providers and services for both views\n  const globalScratchpadProvider = new ScratchpadProvider(\n    globalScratchpadDir,\n    \"global\"\n  );\n  const globalScratchpadService = new ScratchpadService(\n    globalScratchpadDir,\n    \"global\"\n  );\n\n  const workspaceScratchpadProvider = new ScratchpadProvider(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n  const workspaceScratchpadService = new ScratchpadService(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n\n  // Register tree data providers\n  const globalTreeView = vscode.window.createTreeView(\"scratchpadExplorer\", {\n    treeDataProvider: globalScratchpadProvider,\n    showCollapseAll: false,\n  });\n\n  const workspaceTreeView = vscode.window.createTreeView(\n    \"workspaceScratchpadExplorer\",\n    {\n      treeDataProvider: workspaceScratchpadProvider,\n      showCollapseAll: false,\n    }\n  );\n\n  // Register commands\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFile\",\n      async () => {\n        await globalScratchpadService.createScratchFile();\n        globalScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFile\",\n      async () => {\n        await workspaceScratchpadService.createScratchFile();\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.deleteScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.deleteScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            provider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.renameScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.renameScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            provider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\"myscratchpad.refreshScratchpad\", () => {\n      globalScratchpadProvider.refresh();\n    }),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.refreshWorkspaceScratchpad\",\n      () => {\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    globalTreeView,\n    workspaceTreeView\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport {\n  FileTypeEnum,\n  IScratchFile,\n  fileTypeLabels,\n} from \"../models/scratchFile\";\n\nexport class ScratchpadService {\n  constructor(private scratchpadDir: string, public readonly scope: string = \"global\") {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Create a new scratch file\n   */\n  async createScratchFile(): Promise<void> {\n    // Ask the user for the file type\n    const fileType = await this.askForFileType();\n    if (!fileType) {\n      return; // User cancelled\n    }\n\n    // Ask for a name\n    const defaultName = this.generateDefaultName(fileType);\n    const fileName = await vscode.window.showInputBox({\n      prompt: \"Enter a name for your scratch file\",\n      value: defaultName,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        const fullPath = path.join(this.scratchpadDir, `${value}.${fileType}`);\n        if (fs.existsSync(fullPath)) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!fileName) {\n      return; // User cancelled\n    }\n\n    // Create the file\n    const fullPath = path.join(this.scratchpadDir, `${fileName}.${fileType}`);\n    const initialContent = this.getInitialContent(fileType);\n\n    fs.writeFileSync(fullPath, initialContent);\n\n    // Open the file\n    const document = await vscode.workspace.openTextDocument(fullPath);\n    await vscode.window.showTextDocument(document);\n  }\n\n  /**\n   * Delete a scratch file\n   */\n  async deleteScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const confirmation = await vscode.window.showWarningMessage(\n      `Are you sure you want to delete '${scratchFile.name}'?`,\n      { modal: true },\n      \"Delete\"\n    );\n\n    if (confirmation === \"Delete\") {\n      try {\n        fs.unlinkSync(scratchFile.path);\n        return true;\n      } catch (error) {\n        console.error(\"Failed to delete scratch file:\", error);\n        vscode.window.showErrorMessage(\n          `Failed to delete scratch file: ${error}`\n        );\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Rename a scratch file\n   */\n  async renameScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const nameWithoutExt = path.basename(\n      scratchFile.name,\n      `.${scratchFile.extension}`\n    );\n\n    const newName = await vscode.window.showInputBox({\n      prompt: \"Enter a new name for your scratch file\",\n      value: nameWithoutExt,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        const fullPath = path.join(\n          this.scratchpadDir,\n          `${value}.${scratchFile.extension}`\n        );\n        if (fs.existsSync(fullPath) && fullPath !== scratchFile.path) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!newName) {\n      return false; // User cancelled\n    }\n\n    const newPath = path.join(\n      this.scratchpadDir,\n      `${newName}.${scratchFile.extension}`\n    );\n\n    try {\n      fs.renameSync(scratchFile.path, newPath);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to rename scratch file:\", error);\n      vscode.window.showErrorMessage(`Failed to rename scratch file: ${error}`);\n      return false;\n    }\n  }\n\n  private async askForFileType(): Promise<FileTypeEnum | string | undefined> {\n    const items = Object.entries(fileTypeLabels).map(([ext, label]) => ({\n      label,\n      description: ext === 'custom' ? 'Enter your own extension' : `.${ext}`,\n      extension: ext as FileTypeEnum,\n    }));\n\n    const selected = await vscode.window.showQuickPick(items, {\n      placeHolder: \"Select a file type for your scratch file\",\n    });\n\n    if (selected?.extension === FileTypeEnum.Custom) {\n      const customExtension = await vscode.window.showInputBox({\n        prompt: \"Enter the file extension (without the dot)\",\n        placeHolder: \"e.g., py, go, rb, java\",\n        validateInput: (value) => {\n          if (!value) {\n            return \"Extension cannot be empty\";\n          }\n          if (value.includes('.') || value.includes('/') || value.includes('\\\\')) {\n            return \"Extension should not contain dots or slashes\";\n          }\n          if (!/^[a-zA-Z0-9]+$/.test(value)) {\n            return \"Extension should only contain letters and numbers\";\n          }\n          return null;\n        },\n      });\n      return customExtension;\n    }\n\n    return selected?.extension;\n  }\n\n  private generateDefaultName(fileType: FileTypeEnum | string): string {\n    const timestamp = new Date()\n      .toISOString()\n      .replace(/[-:]/g, \"\")\n      .replace(\"T\", \"_\")\n      .substring(0, 15);\n    const prefix = this.getFileTypePrefix(fileType);\n    return `${prefix}${timestamp}`;\n  }\n\n  private getFileTypePrefix(fileType: FileTypeEnum | string): string {\n    switch (fileType) {\n      case FileTypeEnum.JavaScript:\n        return \"js_\";\n      case FileTypeEnum.TypeScript:\n        return \"ts_\";\n      case FileTypeEnum.HTML:\n        return \"html_\";\n      case FileTypeEnum.CSS:\n        return \"css_\";\n      case FileTypeEnum.JSON:\n        return \"json_\";\n      case FileTypeEnum.Markdown:\n        return \"md_\";\n      case FileTypeEnum.SQL:\n        return \"sql_\";\n      default:\n        // For custom extensions, use the extension as prefix\n        if (typeof fileType === 'string') {\n          return `${fileType}_`;\n        }\n        return \"scratch_\";\n    }\n  }\n\n  private getInitialContent(fileType: FileTypeEnum | string): string {\n    const dateComment = `// Created on ${new Date().toLocaleString()}`;\n\n    switch (fileType) {\n      case FileTypeEnum.JavaScript:\n        return `${dateComment}\\n\\n// JavaScript Scratch File\\nconsole.log('Hello, World!');\\n`;\n\n      case FileTypeEnum.TypeScript:\n        return `${dateComment}\\n\\n// TypeScript Scratch File\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\n\\nconst greeting = (person: Person): string => {\\n  return \\`Hello, \\${person.name}!\\`;\\n};\\n\\nconsole.log(greeting({ name: 'World', age: 0 }));\\n`;\n\n      case FileTypeEnum.HTML:\n        return `<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta charset=\"UTF-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <title>Scratch</title>\\n  <style>\\n    body {\\n      font-family: Arial, sans-serif;\\n      margin: 2rem;\\n    }\\n  </style>\\n</head>\\n<body>\\n  <h1>HTML Scratch</h1>\\n  <p>Created on ${new Date().toLocaleString()}</p>\\n</body>\\n</html>\\n`;\n\n      case FileTypeEnum.CSS:\n        return `/* Created on ${new Date().toLocaleString()} */\\n\\n/* CSS Scratch File */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n}\\n\\n.container {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n}\\n`;\n\n      case FileTypeEnum.JSON:\n        return `{\\n  \"created\": \"${new Date().toISOString()}\",\\n  \"name\": \"JSON Scratch\",\\n  \"items\": [\\n    {\\n      \"id\": 1,\\n      \"value\": \"Example\"\\n    }\\n  ]\\n}\\n`;\n\n      case FileTypeEnum.Markdown:\n        return `# Markdown Scratch\\n\\nCreated on ${new Date().toLocaleString()}\\n\\n## Heading\\n\\nSample text here.\\n\\n* List item 1\\n* List item 2\\n* List item 3\\n\\n## Code Example\\n\\n\\`\\`\\`javascript\\nconsole.log('Hello, World!');\\n\\`\\`\\`\\n`;\n\n      case FileTypeEnum.SQL:\n        return `-- Created on ${new Date().toLocaleString()}\\n\\n-- SQL Scratch File\\nSELECT *\\nFROM users\\nWHERE active = true\\nORDER BY created_at DESC\\nLIMIT 10;\\n`;\n\n      default:\n        // For custom file types, provide a generic template with appropriate comment style\n        if (typeof fileType === 'string') {\n          const commentChar = this.getCommentCharForExtension(fileType);\n          return `${commentChar} Created on ${new Date().toLocaleString()}\\n\\n${commentChar} ${fileType.toUpperCase()} Scratch File\\n\\n`;\n        }\n        return `Created on ${new Date().toLocaleString()}\\n\\nScratch file for notes and temporary content.\\n`;\n    }\n  }\n\n  private getCommentCharForExtension(extension: string): string {\n    // Common comment patterns for different file types\n    const commentMap: { [key: string]: string } = {\n      py: '#',\n      rb: '#',\n      sh: '#',\n      bash: '#',\n      r: '#',\n      pl: '#',\n      php: '//',\n      go: '//',\n      java: '//',\n      c: '//',\n      cpp: '//',\n      cs: '//',\n      swift: '//',\n      kt: '//',\n      scala: '//',\n      rust: '//',\n      rs: '//',\n      dart: '//',\n      lua: '--',\n      hs: '--',\n      elm: '--',\n      ex: '#',\n      exs: '#',\n      erl: '%',\n      clj: ';',\n      lisp: ';',\n      vim: '\"',\n      ini: ';',\n      cfg: '#',\n      yaml: '#',\n      yml: '#',\n      toml: '#',\n      bat: 'REM',\n      ps1: '#',\n    };\n\n    return commentMap[extension.toLowerCase()] || '//';\n  }\n}\n","module.exports = require(\"vscode\");","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { IScratchFile, getFileTypeIcon } from \"./scratchFile\";\n\nexport class ScratchpadTreeItem extends vscode.TreeItem {\n  constructor(\n    public readonly scratchFile: IScratchFile,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n  ) {\n    super(scratchFile.name, collapsibleState);\n\n    // Set the appropriate icon\n    this.iconPath = new vscode.ThemeIcon(\n      getFileTypeIcon(scratchFile.extension)\n    );\n\n    // Command to execute when clicking on the tree item\n    this.command = {\n      command: \"vscode.open\",\n      title: \"Open Scratch File\",\n      arguments: [vscode.Uri.file(scratchFile.path)],\n    };\n\n    // Contextual data for commands\n    this.contextValue = \"scratchFile\";\n\n    // Set tooltip\n    const created = new Date(scratchFile.created).toLocaleString();\n    const modified = new Date(scratchFile.lastModified).toLocaleString();\n    this.tooltip = `${scratchFile.name}\\nCreated: ${created}\\nLast Modified: ${modified}`;\n\n    // Set description (file extension)\n    this.description = scratchFile.extension;\n  }\n}\n\nexport class ScratchpadProvider\n  implements vscode.TreeDataProvider<ScratchpadTreeItem>\n{\n  private _onDidChangeTreeData: vscode.EventEmitter<\n    ScratchpadTreeItem | undefined | null | void\n  > = new vscode.EventEmitter<ScratchpadTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<\n    ScratchpadTreeItem | undefined | null | void\n  > = this._onDidChangeTreeData.event;\n\n  constructor(\n    private scratchpadDir: string,\n    public readonly scope: string = \"global\"\n  ) {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n\n  getTreeItem(element: ScratchpadTreeItem): vscode.TreeItem {\n    return element;\n  }\n\n  async getChildren(\n    element?: ScratchpadTreeItem\n  ): Promise<ScratchpadTreeItem[]> {\n    if (element) {\n      return []; // No children for leaf nodes\n    } else {\n      return this.getScratchFiles();\n    }\n  }\n\n  private getScratchFiles(): ScratchpadTreeItem[] {\n    try {\n      const ideNames = [\"Code\", \"Code - Insiders\", \"Cursor\", \"Windsurf\"];\n\n      // Get current IDE name\n      const currentIdeName = vscode.env.appName;\n\n      // Get all files from the current directory\n      let allFiles: string[] = [];\n      if (fs.existsSync(this.scratchpadDir)) {\n        allFiles = fs\n          .readdirSync(this.scratchpadDir)\n          .map((file) => path.join(this.scratchpadDir, file));\n      }\n\n      // Try to find scratch files in other IDE directories\n      ideNames.forEach((ideName) => {\n        if (ideName === currentIdeName) {\n          return; // Skip current IDE as we already got its files\n        }\n\n        // Construct path for other IDEs\n        // For example: /Users/username/Library/Application Support/Code - Insiders/User/globalStorage/...\n        // becomes: /Users/username/Library/Application Support/Code/User/globalStorage/...\n        const ideSpecificDir = this.scratchpadDir.replace(\n          /Code( - Insiders)?|Cursor|Windsurf/g,\n          ideName\n        );\n\n        if (fs.existsSync(ideSpecificDir)) {\n          const ideFiles = fs\n            .readdirSync(ideSpecificDir)\n            .map((file) => path.join(ideSpecificDir, file));\n          allFiles = allFiles.concat(ideFiles);\n        }\n      });\n\n      // Process all found files\n      return allFiles\n        .filter((filePath) => !fs.statSync(filePath).isDirectory())\n        .map((filePath) => {\n          const stats = fs.statSync(filePath);\n          const fileName = path.basename(filePath);\n          const extension = path.extname(fileName).slice(1); // Remove the dot\n          const name = fileName;\n\n          const scratchFile: IScratchFile = {\n            name,\n            extension,\n            path: filePath,\n            created: stats.birthtime.getTime(),\n            lastModified: stats.mtime.getTime(),\n          };\n\n          return new ScratchpadTreeItem(\n            scratchFile,\n            vscode.TreeItemCollapsibleState.None\n          );\n        })\n        .sort(\n          (a, b) => b.scratchFile.lastModified - a.scratchFile.lastModified\n        ); // Sort by last modified (newest first)\n    } catch (error) {\n      console.error(\"Error reading scratchpad directory:\", error);\n      return [];\n    }\n  }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["FileTypeEnum","fileTypeLabels","JavaScript","TypeScript","HTML","CSS","JSON","Markdown","Text","SQL","Custom","getFileTypeIcon","extension","getCustomFileIcon","py","rb","go","java","c","cpp","cs","php","swift","kt","rs","dart","lua","r","sh","bash","ps1","bat","yaml","yml","toml","ini","cfg","xml","vue","svelte","jsx","tsx","scss","sass","less","styl","coffee","elm","hs","clj","ex","erl","vim","dockerfile","tf","hcl","cody","toLowerCase","context","console","log","globalScratchpadDir","path","join","globalStorageUri","fsPath","workspaceFolderPath","vscode","workspace","workspaceFolders","basename","uri","workspaceScratchpadDir","globalScratchpadProvider","ScratchpadProvider","globalScratchpadService","ScratchpadService","workspaceScratchpadProvider","workspaceScratchpadService","globalTreeView","window","createTreeView","treeDataProvider","showCollapseAll","workspaceTreeView","subscriptions","push","commands","registerCommand","async","createScratchFile","refresh","item","treeItem","scratchFile","isWorkspaceFile","includes","service","provider","deleteScratchFile","renameScratchFile","scratchpadDir","scope","constructor","fs","existsSync","mkdirSync","recursive","fileType","this","askForFileType","defaultName","generateDefaultName","fileName","showInputBox","prompt","value","validateInput","fullPath","initialContent","getInitialContent","writeFileSync","document","openTextDocument","showTextDocument","showWarningMessage","name","modal","unlinkSync","error","showErrorMessage","nameWithoutExt","newName","newPath","renameSync","items","Object","entries","map","ext","label","description","selected","showQuickPick","placeHolder","test","timestamp","Date","toISOString","replace","substring","getFileTypePrefix","dateComment","toLocaleString","commentChar","getCommentCharForExtension","toUpperCase","pl","scala","rust","exs","lisp","module","exports","require","ScratchpadTreeItem","TreeItem","collapsibleState","super","iconPath","ThemeIcon","command","title","arguments","Uri","file","contextValue","created","modified","lastModified","tooltip","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","fire","getTreeItem","element","getChildren","getScratchFiles","ideNames","currentIdeName","env","appName","allFiles","readdirSync","forEach","ideName","ideSpecificDir","ideFiles","concat","filter","filePath","statSync","isDirectory","stats","extname","slice","birthtime","getTime","mtime","TreeItemCollapsibleState","None","sort","a","b","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}