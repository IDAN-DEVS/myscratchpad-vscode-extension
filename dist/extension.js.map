{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://myscratchpad/./src/models/scratchFile.ts","webpack://myscratchpad/./src/extension.ts","webpack://myscratchpad/./src/services/scratchpadService.ts","webpack://myscratchpad/external commonjs \"vscode\"","webpack://myscratchpad/./src/models/scratchpadProvider.ts","webpack://myscratchpad/./src/services/thirdParties/codyService.ts","webpack://myscratchpad/external node-commonjs \"fs\"","webpack://myscratchpad/external node-commonjs \"path\"","webpack://myscratchpad/webpack/bootstrap","webpack://myscratchpad/webpack/startup"],"sourcesContent":["export interface IScratchFile {\n  name: string;\n  extension: string;\n  path: string;\n  created: number;\n  lastModified: number;\n}\n\nexport enum FileTypeEnum {\n  JavaScript = \"js\",\n  TypeScript = \"ts\",\n  HTML = \"html\",\n  CSS = \"css\",\n  JSON = \"json\",\n  Markdown = \"md\",\n  Text = \"txt\",\n  SQL = \"sql\",\n  Custom = \"custom\",\n}\n\nexport const getFileTypeIcon = (extension: string): string => {\n  switch (extension) {\n    case FileTypeEnum.JavaScript:\n      return \"symbol-method\";\n    case FileTypeEnum.TypeScript:\n      return \"symbol-interface\";\n    case FileTypeEnum.HTML:\n      return \"browser\";\n    case FileTypeEnum.CSS:\n      return \"symbol-color\";\n    case FileTypeEnum.JSON:\n      return \"symbol-object\";\n    case FileTypeEnum.Markdown:\n      return \"markdown\";\n    case FileTypeEnum.SQL:\n      return \"database\";\n    case FileTypeEnum.Text:\n      return \"file-text\";\n    default:\n      // For custom extensions, return extension-specific icons where available\n      return getCustomFileIcon(extension);\n  }\n};\n\nexport const getCustomFileIcon = (extension: string): string => {\n  const iconMap: { [key: string]: string } = {\n    py: \"symbol-method\",\n    rb: \"ruby\",\n    go: \"go\",\n    java: \"coffee\",\n    c: \"symbol-method\",\n    cpp: \"symbol-method\",\n    cs: \"symbol-class\",\n    php: \"symbol-method\",\n    swift: \"symbol-method\",\n    kt: \"symbol-class\",\n    rs: \"symbol-method\",\n    dart: \"symbol-method\",\n    lua: \"symbol-method\",\n    r: \"graph\",\n    sh: \"terminal\",\n    bash: \"terminal\",\n    ps1: \"terminal\",\n    bat: \"terminal\",\n    yaml: \"symbol-object\",\n    yml: \"symbol-object\",\n    toml: \"symbol-object\",\n    ini: \"gear\",\n    cfg: \"gear\",\n    xml: \"symbol-object\",\n    vue: \"symbol-color\",\n    svelte: \"symbol-color\",\n    jsx: \"symbol-method\",\n    tsx: \"symbol-interface\",\n    scss: \"symbol-color\",\n    sass: \"symbol-color\",\n    less: \"symbol-color\",\n    styl: \"symbol-color\",\n    coffee: \"coffee\",\n    elm: \"symbol-method\",\n    hs: \"symbol-method\",\n    clj: \"symbol-method\",\n    ex: \"symbol-method\",\n    erl: \"symbol-method\",\n    vim: \"gear\",\n    dockerfile: \"package\",\n    tf: \"symbol-object\",\n    hcl: \"symbol-object\",\n    cody: \"robot\",\n    [\"*\"]: \"file-code\",\n  };\n\n  return iconMap[extension.toLowerCase()] || \"file-code\";\n};\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { ScratchpadProvider } from \"./models/scratchpadProvider\";\nimport { ScratchpadService } from \"./services/scratchpadService\";\nimport { IScratchFile } from \"./models/scratchFile\";\nimport { codyService } from \"./services/thirdParties/codyService\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"MyScratchPad\" is now active!');\n\n  // Create the global scratchpad directory\n  const globalScratchpadDir = path.join(\n    context.globalStorageUri.fsPath,\n    \"scratchFiles\"\n  );\n\n  // Get workspace folder name for unique directory naming\n  let workspaceFolderPath = vscode.workspace.workspaceFolders\n    ? path.basename(vscode.workspace.workspaceFolders[0].uri.fsPath)\n    : \"default\";\n\n  // Create workspace-specific scratchpad directory\n  const workspaceScratchpadDir = vscode.workspace.workspaceFolders\n    ? path.join(\n        context.globalStorageUri.fsPath,\n        \"workspaceScratchFiles\",\n        workspaceFolderPath\n      )\n    : path.join(context.globalStorageUri.fsPath, \"workspaceScratchFiles\");\n\n  // Initialize providers and services for both views\n  const globalScratchpadProvider = new ScratchpadProvider(\n    globalScratchpadDir,\n    \"global\"\n  );\n  const globalScratchpadService = new ScratchpadService(\n    globalScratchpadDir,\n    \"global\"\n  );\n\n  const workspaceScratchpadProvider = new ScratchpadProvider(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n  const workspaceScratchpadService = new ScratchpadService(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n\n  // Register tree data providers\n  const globalTreeView = vscode.window.createTreeView(\"scratchpadExplorer\", {\n    treeDataProvider: globalScratchpadProvider,\n    showCollapseAll: false,\n  });\n\n  const workspaceTreeView = vscode.window.createTreeView(\n    \"workspaceScratchpadExplorer\",\n    {\n      treeDataProvider: workspaceScratchpadProvider,\n      showCollapseAll: false,\n    }\n  );\n\n  // Register commands\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFile\",\n      async () => {\n        await globalScratchpadService.createScratchFile();\n        globalScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFile\",\n      async () => {\n        await workspaceScratchpadService.createScratchFile();\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.deleteScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.deleteScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            provider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.renameScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.renameScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            provider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\"myscratchpad.refreshScratchpad\", () => {\n      globalScratchpadProvider.refresh();\n    }),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.refreshWorkspaceScratchpad\",\n      () => {\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFileFromSelection\",\n      async () => {\n        await globalScratchpadService.createScratchFileFromSelection();\n        globalScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFileFromSelection\",\n      async () => {\n        await workspaceScratchpadService.createScratchFileFromSelection();\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFileFromFile\",\n      async (fileUri: vscode.Uri) => {\n        await globalScratchpadService.createScratchFileFromFile(fileUri);\n        globalScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFileFromFile\",\n      async (fileUri: vscode.Uri) => {\n        await workspaceScratchpadService.createScratchFileFromFile(fileUri);\n        workspaceScratchpadProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.addFileToCodyAi\",\n      async (fileUri: vscode.Uri) => {\n        await codyService.executeMentionFileCommand(fileUri);\n      }\n    ),\n\n    globalTreeView,\n    workspaceTreeView\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { IScratchFile } from \"../models/scratchFile\";\n\nexport class ScratchpadService {\n  constructor(\n    private scratchpadDir: string,\n    public readonly scope: string = \"global\"\n  ) {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Create a new scratch file from selected text\n   */\n  async createScratchFileFromSelection(): Promise<void> {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage(\"No active editor found\");\n      return;\n    }\n\n    const selection = editor.selection;\n    const selectedText = editor.document.getText(selection);\n\n    if (!selectedText.trim()) {\n      vscode.window.showErrorMessage(\"No text selected\");\n      return;\n    }\n\n    // Generate suggested filename based on current file\n    let suggestedName: string | undefined;\n    if (editor.document.fileName) {\n      const originalFileName = path.basename(editor.document.fileName);\n      const extension = path.extname(originalFileName);\n      const nameWithoutExt = path.basename(originalFileName, extension);\n      suggestedName = `${nameWithoutExt}_scratch${extension}`;\n    }\n\n    await this.createScratchFile(selectedText, suggestedName);\n  }\n\n  /**\n   * Create a new scratch file from an existing file\n   */\n  async createScratchFileFromFile(fileUri: vscode.Uri): Promise<void> {\n    try {\n      // Read the file content\n      const fileContent = await vscode.workspace.fs.readFile(fileUri);\n      const content = Buffer.from(fileContent).toString(\"utf8\");\n\n      // Generate suggested filename based on original file\n      const originalFileName = path.basename(fileUri.fsPath);\n      const extension = path.extname(originalFileName);\n      const nameWithoutExt = path.basename(originalFileName, extension);\n      const suggestedName = `${nameWithoutExt}_scratch${extension}`;\n\n      await this.createScratchFile(content, suggestedName);\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to read file: ${error}`);\n    }\n  }\n\n  /**\n   * Create a new scratch file\n   */\n  async createScratchFile(\n    initialContent?: string,\n    suggestedName?: string\n  ): Promise<void> {\n    // Ask for a name with extension\n    const defaultName = suggestedName || this.generateDefaultName();\n    const fileName = await vscode.window.showInputBox({\n      prompt:\n        \"Enter a name for your scratch file (include extension, e.g., note.txt, script.js, data.json)\",\n      value: defaultName,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        if (!value.includes(\".\")) {\n          return \"Please include a file extension (e.g., .txt, .js, .md)\";\n        }\n        const fullPath = path.join(this.scratchpadDir, value);\n        if (fs.existsSync(fullPath)) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!fileName) {\n      return; // User cancelled\n    }\n\n    // Extract extension from filename\n    const extension = path.extname(fileName).slice(1); // Remove the dot\n\n    // Create the file\n    const fullPath = path.join(this.scratchpadDir, fileName);\n    let content: string;\n\n    if (initialContent !== undefined) {\n      content = initialContent;\n    } else {\n      // Try to get clipboard content, fallback to default content\n      try {\n        const clipboardText = await vscode.env.clipboard.readText();\n        content = clipboardText.trim() || this.getInitialContent(extension);\n      } catch (error) {\n        content = this.getInitialContent(extension);\n      }\n    }\n\n    fs.writeFileSync(fullPath, content);\n\n    // Open the file\n    const document = await vscode.workspace.openTextDocument(fullPath);\n    await vscode.window.showTextDocument(document);\n  }\n\n  /**\n   * Delete a scratch file\n   */\n  async deleteScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const confirmation = await vscode.window.showWarningMessage(\n      `Are you sure you want to delete '${scratchFile.name}'?`,\n      { modal: true },\n      \"Delete\"\n    );\n\n    if (confirmation === \"Delete\") {\n      try {\n        fs.unlinkSync(scratchFile.path);\n        return true;\n      } catch (error) {\n        console.error(\"Failed to delete scratch file:\", error);\n        vscode.window.showErrorMessage(\n          `Failed to delete scratch file: ${error}`\n        );\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Rename a scratch file\n   */\n  async renameScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const nameWithoutExt = path.basename(\n      scratchFile.name,\n      `.${scratchFile.extension}`\n    );\n\n    const newName = await vscode.window.showInputBox({\n      prompt: \"Enter a new name for your scratch file\",\n      value: nameWithoutExt,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        const fullPath = path.join(\n          this.scratchpadDir,\n          `${value}.${scratchFile.extension}`\n        );\n        if (fs.existsSync(fullPath) && fullPath !== scratchFile.path) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!newName) {\n      return false; // User cancelled\n    }\n\n    const newPath = path.join(\n      this.scratchpadDir,\n      `${newName}.${scratchFile.extension}`\n    );\n\n    try {\n      fs.renameSync(scratchFile.path, newPath);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to rename scratch file:\", error);\n      vscode.window.showErrorMessage(`Failed to rename scratch file: ${error}`);\n      return false;\n    }\n  }\n\n  private generateDefaultName(): string {\n    const timestamp = new Date()\n      .toISOString()\n      .replace(/[-:]/g, \"\")\n      .replace(\"T\", \"_\")\n      .substring(0, 15);\n    return `scratch_${timestamp}.txt`;\n  }\n\n  private getInitialContent(extension: string): string {\n    const dateComment = `// Created on ${new Date().toLocaleString()}`;\n\n    switch (extension.toLowerCase()) {\n      case \"js\":\n        return `${dateComment}\\n\\n// JavaScript Scratch File\\nconsole.log('Hello, World!');\\n`;\n\n      case \"ts\":\n        return `${dateComment}\\n\\n// TypeScript Scratch File\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\n\\nconst greeting = (person: Person): string => {\\n  return \\`Hello, \\${person.name}!\\`;\\n};\\n\\nconsole.log(greeting({ name: 'World', age: 0 }));\\n`;\n\n      case \"html\":\n        return `<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta charset=\"UTF-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <title>Scratch</title>\\n  <style>\\n    body {\\n      font-family: Arial, sans-serif;\\n      margin: 2rem;\\n    }\\n  </style>\\n</head>\\n<body>\\n  <h1>HTML Scratch</h1>\\n  <p>Created on ${new Date().toLocaleString()}</p>\\n</body>\\n</html>\\n`;\n\n      case \"css\":\n        return `/* Created on ${new Date().toLocaleString()} */\\n\\n/* CSS Scratch File */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n}\\n\\n.container {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n}\\n`;\n\n      case \"json\":\n        return `{\\n  \"created\": \"${new Date().toISOString()}\",\\n  \"name\": \"JSON Scratch\",\\n  \"items\": [\\n    {\\n      \"id\": 1,\\n      \"value\": \"Example\"\\n    }\\n  ]\\n}\\n`;\n\n      case \"md\":\n      case \"markdown\":\n        return `# Markdown Scratch\\n\\nCreated on ${new Date().toLocaleString()}\\n\\n## Heading\\n\\nSample text here.\\n\\n* List item 1\\n* List item 2\\n* List item 3\\n\\n## Code Example\\n\\n\\`\\`\\`javascript\\nconsole.log('Hello, World!');\\n\\`\\`\\`\\n`;\n\n      case \"sql\":\n        return `-- Created on ${new Date().toLocaleString()}\\n\\n-- SQL Scratch File\\nSELECT *\\nFROM users\\nWHERE active = true\\nORDER BY created_at DESC\\nLIMIT 10;\\n`;\n\n      default:\n        // For custom file types, provide a generic template with appropriate comment style\n        const commentChar = this.getCommentCharForExtension(extension);\n        return `${commentChar} Created on ${new Date().toLocaleString()}\\n\\n${commentChar} ${extension.toUpperCase()} Scratch File\\n\\n`;\n    }\n  }\n\n  private getCommentCharForExtension(extension: string): string {\n    // Common comment patterns for different file types\n    const commentMap: { [key: string]: string } = {\n      py: \"#\",\n      rb: \"#\",\n      sh: \"#\",\n      bash: \"#\",\n      r: \"#\",\n      pl: \"#\",\n      php: \"//\",\n      go: \"//\",\n      java: \"//\",\n      c: \"//\",\n      cpp: \"//\",\n      cs: \"//\",\n      swift: \"//\",\n      kt: \"//\",\n      scala: \"//\",\n      rust: \"//\",\n      rs: \"//\",\n      dart: \"//\",\n      lua: \"--\",\n      hs: \"--\",\n      elm: \"--\",\n      ex: \"#\",\n      exs: \"#\",\n      erl: \"%\",\n      clj: \";\",\n      lisp: \";\",\n      vim: '\"',\n      ini: \";\",\n      cfg: \"#\",\n      yaml: \"#\",\n      yml: \"#\",\n      toml: \"#\",\n      bat: \"REM\",\n      ps1: \"#\",\n    };\n\n    return commentMap[extension.toLowerCase()] || \"//\";\n  }\n}\n","module.exports = require(\"vscode\");","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { IScratchFile, getFileTypeIcon } from \"./scratchFile\";\n\nexport class ScratchpadTreeItem extends vscode.TreeItem {\n  constructor(\n    public readonly scratchFile: IScratchFile,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n  ) {\n    super(scratchFile.name, collapsibleState);\n\n    // Set the appropriate icon\n    this.iconPath = new vscode.ThemeIcon(\n      getFileTypeIcon(scratchFile.extension)\n    );\n\n    // Command to execute when clicking on the tree item\n    this.command = {\n      command: \"vscode.open\",\n      title: \"Open Scratch File\",\n      arguments: [vscode.Uri.file(scratchFile.path)],\n    };\n\n    // Contextual data for commands\n    this.contextValue = \"scratchFile\";\n\n    // Set tooltip\n    const created = new Date(scratchFile.created).toLocaleString();\n    const modified = new Date(scratchFile.lastModified).toLocaleString();\n    this.tooltip = `${scratchFile.name}\\nCreated: ${created}\\nLast Modified: ${modified}`;\n\n    // Set description (file extension)\n    this.description = scratchFile.extension;\n  }\n}\n\nexport class ScratchpadProvider\n  implements vscode.TreeDataProvider<ScratchpadTreeItem>\n{\n  private _onDidChangeTreeData: vscode.EventEmitter<\n    ScratchpadTreeItem | undefined | null | void\n  > = new vscode.EventEmitter<ScratchpadTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<\n    ScratchpadTreeItem | undefined | null | void\n  > = this._onDidChangeTreeData.event;\n\n  constructor(\n    private scratchpadDir: string,\n    public readonly scope: string = \"global\"\n  ) {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n\n  getTreeItem(element: ScratchpadTreeItem): vscode.TreeItem {\n    return element;\n  }\n\n  async getChildren(\n    element?: ScratchpadTreeItem\n  ): Promise<ScratchpadTreeItem[]> {\n    if (element) {\n      return []; // No children for leaf nodes\n    } else {\n      return this.getScratchFiles();\n    }\n  }\n\n  private getScratchFiles(): ScratchpadTreeItem[] {\n    try {\n      const ideNames = [\"Code\", \"Code - Insiders\", \"Cursor\", \"Windsurf\"];\n\n      const splitPart1 = this.scratchpadDir.split(\"/User/\")[0];\n      const splitPart2 = this.scratchpadDir.split(\"/User/\")[1];\n\n      // Construct the path for each IDE\n      const idePaths = ideNames.map((ideName) => {\n        // remove the \"ide path\" from part1\n        const newPart1 = splitPart1.split(\"/\").slice(0, -1).join(\"/\");\n        return path.join(newPart1, ideName, \"User\", splitPart2);\n      });\n\n      // Get all files from all IDE paths\n      const allFiles: string[] = [];\n      const uniqueFileNames = new Set<string>();\n\n      idePaths.forEach((idePath) => {\n        if (fs.existsSync(idePath)) {\n          const ideFiles = fs\n            .readdirSync(idePath)\n            .map((file) => path.join(idePath, file))\n            .filter((filePath) => !fs.statSync(filePath).isDirectory());\n\n          // Add files, filtering by unique file names\n          ideFiles.forEach((filePath) => {\n            const fileName = path.basename(filePath);\n            if (!uniqueFileNames.has(fileName)) {\n              uniqueFileNames.add(fileName);\n              allFiles.push(filePath);\n            }\n          });\n        }\n      });\n\n      // Process all found files\n      return allFiles\n        .map((filePath) => {\n          const stats = fs.statSync(filePath);\n          const fileName = path.basename(filePath);\n          const extension = path.extname(fileName).slice(1); // Remove the dot\n          const name = fileName;\n\n          const scratchFile: IScratchFile = {\n            name,\n            extension,\n            path: filePath,\n            created: stats.birthtime.getTime(),\n            lastModified: stats.mtime.getTime(),\n          };\n\n          return new ScratchpadTreeItem(\n            scratchFile,\n            vscode.TreeItemCollapsibleState.None\n          );\n        })\n        .sort(\n          (a, b) => b.scratchFile.lastModified - a.scratchFile.lastModified\n        ); // Sort by last modified (newest first)\n    } catch (error) {\n      console.error(\"Error reading scratchpad directory:\", error);\n      return [];\n    }\n  }\n}\n","import * as vscode from \"vscode\";\n\nconst extensionName = \"Cody Ai\";\nconst extensionIdentifier = \"sourcegraph.cody-ai\";\n\nconst CODY_COMMAND = {\n  MENTION: {\n    FILE: \"cody.mention.file\",\n  },\n  COMMAND: {\n    CUSTOM: \"cody.command.custom\",\n  },\n};\n\nfunction checkCodyIsInstalledAndReady(): boolean {\n  try {\n    const codyExtension = vscode.extensions.getExtension(extensionIdentifier);\n\n    if (!codyExtension) {\n      vscode.window.showErrorMessage(\n        `${extensionName} extension is not installed or is disabled.`\n      );\n      return false;\n    }\n\n    if (!codyExtension.isActive) {\n      vscode.window.showErrorMessage(\n        `${extensionName} extension is not active.`\n      );\n      return false;\n    }\n\n    vscode.window.showInformationMessage(\n      `${extensionName} extension is ready.`\n    );\n    return true;\n  } catch (error) {\n    console.error(\"Error checking for cody extension\", error);\n    vscode.window.showErrorMessage(\n      `Failed to check ${extensionName} extension status.`\n    );\n    return false;\n  }\n}\n\nasync function executeMentionFileCommand(uri: vscode.Uri) {\n  try {\n    const isReady = checkCodyIsInstalledAndReady();\n    if (!isReady) {\n      return;\n    }\n    await vscode.commands.executeCommand(CODY_COMMAND.MENTION.FILE, uri);\n    vscode.window.showInformationMessage(\n      `File added as context in ${extensionName}.`\n    );\n  } catch (error: any) {\n    vscode.window.showErrorMessage(\n      `Failed to trigger ${extensionName} to mention file: ${error.message}`\n    );\n  }\n}\n\nexport const codyService = {\n  executeMentionFileCommand,\n};\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["FileTypeEnum","getFileTypeIcon","extension","JavaScript","TypeScript","HTML","CSS","JSON","Markdown","SQL","Text","getCustomFileIcon","py","rb","go","java","c","cpp","cs","php","swift","kt","rs","dart","lua","r","sh","bash","ps1","bat","yaml","yml","toml","ini","cfg","xml","vue","svelte","jsx","tsx","scss","sass","less","styl","coffee","elm","hs","clj","ex","erl","vim","dockerfile","tf","hcl","cody","toLowerCase","context","console","log","globalScratchpadDir","path","join","globalStorageUri","fsPath","workspaceFolderPath","vscode","workspace","workspaceFolders","basename","uri","workspaceScratchpadDir","globalScratchpadProvider","ScratchpadProvider","globalScratchpadService","ScratchpadService","workspaceScratchpadProvider","workspaceScratchpadService","globalTreeView","window","createTreeView","treeDataProvider","showCollapseAll","workspaceTreeView","subscriptions","push","commands","registerCommand","async","createScratchFile","refresh","item","treeItem","scratchFile","isWorkspaceFile","includes","service","provider","deleteScratchFile","renameScratchFile","createScratchFileFromSelection","fileUri","createScratchFileFromFile","codyService","executeMentionFileCommand","scratchpadDir","scope","constructor","fs","existsSync","mkdirSync","recursive","editor","activeTextEditor","showErrorMessage","selection","selectedText","document","getText","trim","suggestedName","fileName","originalFileName","extname","this","fileContent","readFile","content","Buffer","from","toString","error","initialContent","defaultName","generateDefaultName","showInputBox","prompt","value","validateInput","fullPath","slice","undefined","env","clipboard","readText","getInitialContent","writeFileSync","openTextDocument","showTextDocument","showWarningMessage","name","modal","unlinkSync","nameWithoutExt","newName","newPath","renameSync","Date","toISOString","replace","substring","dateComment","toLocaleString","commentChar","getCommentCharForExtension","toUpperCase","pl","scala","rust","exs","lisp","module","exports","require","ScratchpadTreeItem","TreeItem","collapsibleState","super","iconPath","ThemeIcon","command","title","arguments","Uri","file","contextValue","created","modified","lastModified","tooltip","description","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","fire","getTreeItem","element","getChildren","getScratchFiles","ideNames","splitPart1","split","splitPart2","idePaths","map","ideName","newPart1","allFiles","uniqueFileNames","Set","forEach","idePath","readdirSync","filter","filePath","statSync","isDirectory","has","add","stats","birthtime","getTime","mtime","TreeItemCollapsibleState","None","sort","a","b","extensionName","CODY_COMMAND","codyExtension","extensions","getExtension","isActive","showInformationMessage","checkCodyIsInstalledAndReady","executeCommand","message","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}