{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://myscratchpad/./src/models/scratchFile.ts","webpack://myscratchpad/./src/extension.ts","webpack://myscratchpad/./src/services/scratchpadService.ts","webpack://myscratchpad/external commonjs \"vscode\"","webpack://myscratchpad/./src/views/scratchpadWebviewProvider.ts","webpack://myscratchpad/./src/models/scratchpadProvider.ts","webpack://myscratchpad/external node-commonjs \"fs\"","webpack://myscratchpad/external node-commonjs \"path\"","webpack://myscratchpad/webpack/bootstrap","webpack://myscratchpad/webpack/startup"],"sourcesContent":["export interface IScratchFile {\n  name: string;\n  extension: string;\n  path: string;\n  created: number;\n  lastModified: number;\n}\n\nexport enum FileTypeEnum {\n  JavaScript = \"js\",\n  TypeScript = \"ts\",\n  HTML = \"html\",\n  CSS = \"css\",\n  JSON = \"json\",\n  Markdown = \"md\",\n  Text = \"txt\",\n  SQL = \"sql\",\n  Custom = \"custom\",\n}\n\nexport const getFileTypeIcon = (extension: string): string => {\n  switch (extension) {\n    case FileTypeEnum.JavaScript:\n      return \"symbol-method\";\n    case FileTypeEnum.TypeScript:\n      return \"symbol-interface\";\n    case FileTypeEnum.HTML:\n      return \"browser\";\n    case FileTypeEnum.CSS:\n      return \"symbol-color\";\n    case FileTypeEnum.JSON:\n      return \"symbol-object\";\n    case FileTypeEnum.Markdown:\n      return \"markdown\";\n    case FileTypeEnum.SQL:\n      return \"database\";\n    case FileTypeEnum.Text:\n      return \"file-text\";\n    default:\n      // For custom extensions, return extension-specific icons where available\n      return getCustomFileIcon(extension);\n  }\n};\n\nexport const getCustomFileIcon = (extension: string): string => {\n  const iconMap: { [key: string]: string } = {\n    py: \"symbol-method\",\n    rb: \"ruby\",\n    go: \"go\",\n    java: \"coffee\",\n    c: \"symbol-method\",\n    cpp: \"symbol-method\",\n    cs: \"symbol-class\",\n    php: \"symbol-method\",\n    swift: \"symbol-method\",\n    kt: \"symbol-class\",\n    rs: \"symbol-method\",\n    dart: \"symbol-method\",\n    lua: \"symbol-method\",\n    r: \"graph\",\n    sh: \"terminal\",\n    bash: \"terminal\",\n    ps1: \"terminal\",\n    bat: \"terminal\",\n    yaml: \"symbol-object\",\n    yml: \"symbol-object\",\n    toml: \"symbol-object\",\n    ini: \"gear\",\n    cfg: \"gear\",\n    xml: \"symbol-object\",\n    vue: \"symbol-color\",\n    svelte: \"symbol-color\",\n    jsx: \"symbol-method\",\n    tsx: \"symbol-interface\",\n    scss: \"symbol-color\",\n    sass: \"symbol-color\",\n    less: \"symbol-color\",\n    styl: \"symbol-color\",\n    coffee: \"coffee\",\n    elm: \"symbol-method\",\n    hs: \"symbol-method\",\n    clj: \"symbol-method\",\n    ex: \"symbol-method\",\n    erl: \"symbol-method\",\n    vim: \"gear\",\n    dockerfile: \"package\",\n    tf: \"symbol-object\",\n    hcl: \"symbol-object\",\n\n    [\"*\"]: \"file-code\",\n  };\n\n  return iconMap[extension.toLowerCase()] || \"file-code\";\n};\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { ScratchpadProvider } from \"./models/scratchpadProvider\";\nimport { ScratchpadService } from \"./services/scratchpadService\";\nimport { IScratchFile } from \"./models/scratchFile\";\nimport { ScratchpadWebviewProvider } from \"./views/scratchpadWebviewProvider\";\n\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"MyScratchPad\" is now active!');\n\n  // Create the global scratchpad directory\n  const globalScratchpadDir = path.join(\n    context.globalStorageUri.fsPath,\n    \"scratchFiles\"\n  );\n\n  // Get workspace folder name for unique directory naming\n  let workspaceFolderPath = vscode.workspace.workspaceFolders\n    ? path.basename(vscode.workspace.workspaceFolders[0].uri.fsPath)\n    : \"default\";\n\n  // Create workspace-specific scratchpad directory\n  const workspaceScratchpadDir = vscode.workspace.workspaceFolders\n    ? path.join(\n        context.globalStorageUri.fsPath,\n        \"workspaceScratchFiles\",\n        workspaceFolderPath\n      )\n    : path.join(context.globalStorageUri.fsPath, \"workspaceScratchFiles\");\n\n  // Initialize providers and services for both views\n  const globalScratchpadProvider = new ScratchpadProvider(\n    globalScratchpadDir,\n    \"global\"\n  );\n  const globalScratchpadService = new ScratchpadService(\n    globalScratchpadDir,\n    \"global\"\n  );\n\n  const workspaceScratchpadProvider = new ScratchpadProvider(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n  const workspaceScratchpadService = new ScratchpadService(\n    workspaceScratchpadDir,\n    \"workspace\"\n  );\n\n  // Register webview provider instead of tree views\n  const webviewProvider = new ScratchpadWebviewProvider(\n    context.extensionUri,\n    globalScratchpadDir,\n    workspaceScratchpadDir,\n    globalScratchpadService,\n    workspaceScratchpadService\n  );\n\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\n      ScratchpadWebviewProvider.viewType,\n      webviewProvider\n    )\n  );\n\n  // Set up file watchers for automatic refresh when files change\n  const setupFileWatchers = () => {\n    try {\n      // Watch global scratchpad directory\n      const globalWatcher = vscode.workspace.createFileSystemWatcher(\n        new vscode.RelativePattern(globalScratchpadDir, \"**/*\")\n      );\n      \n      // Watch workspace scratchpad directory  \n      const workspaceWatcher = vscode.workspace.createFileSystemWatcher(\n        new vscode.RelativePattern(workspaceScratchpadDir, \"**/*\")\n      );\n\n      // Refresh on file changes with a small debounce to prevent excessive refreshes\n      let refreshTimeout: NodeJS.Timeout | undefined;\n      const refreshHandler = () => {\n        if (refreshTimeout) {\n          clearTimeout(refreshTimeout);\n        }\n        refreshTimeout = setTimeout(() => {\n          webviewProvider.refresh();\n        }, 100);\n      };\n\n      globalWatcher.onDidChange(refreshHandler);\n      globalWatcher.onDidCreate(refreshHandler);\n      globalWatcher.onDidDelete(refreshHandler);\n      \n      workspaceWatcher.onDidChange(refreshHandler);\n      workspaceWatcher.onDidCreate(refreshHandler);\n      workspaceWatcher.onDidDelete(refreshHandler);\n\n      // Also listen to document save events to catch file saves that might not trigger file system events immediately\n      const documentSaveHandler = vscode.workspace.onDidSaveTextDocument((document) => {\n        const filePath = document.uri.fsPath;\n        // Check if the saved file is in one of our scratchpad directories\n        if (filePath.includes(globalScratchpadDir) || filePath.includes(workspaceScratchpadDir)) {\n          refreshHandler();\n        }\n      });\n\n      context.subscriptions.push(globalWatcher, workspaceWatcher, documentSaveHandler);\n    } catch (error) {\n      console.error(\"Error setting up file watchers:\", error);\n    }\n  };\n\n  // Set up file watchers after a short delay to ensure directories exist\n  setTimeout(setupFileWatchers, 1000);\n\n  // Register commands\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFile\",\n      async () => {\n        await globalScratchpadService.createScratchFile();\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFile\",\n      async () => {\n        await workspaceScratchpadService.createScratchFile();\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.deleteScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.deleteScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            webviewProvider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.renameScratchFile\",\n      async (item: ScratchpadProvider) => {\n        const treeItem = item as any;\n        if (treeItem?.scratchFile) {\n          // Determine which service to use based on file path\n          const isWorkspaceFile = treeItem.scratchFile.path.includes(\n            \"workspaceScratchFiles\"\n          );\n          const { service, provider } = isWorkspaceFile\n            ? {\n                service: workspaceScratchpadService,\n                provider: workspaceScratchpadProvider,\n              }\n            : {\n                service: globalScratchpadService,\n                provider: globalScratchpadProvider,\n              };\n\n          const success = await service.renameScratchFile(\n            treeItem.scratchFile as IScratchFile\n          );\n          if (success) {\n            webviewProvider.refresh();\n          }\n        }\n      }\n    ),\n\n    vscode.commands.registerCommand(\"myscratchpad.refreshScratchpad\", () => {\n      webviewProvider.refresh();\n    }),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.refreshWorkspaceScratchpad\",\n      () => {\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFileFromSelection\",\n      async () => {\n        await globalScratchpadService.createScratchFileFromSelection();\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFileFromSelection\",\n      async () => {\n        await workspaceScratchpadService.createScratchFileFromSelection();\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createScratchFileFromFile\",\n      async (fileUri: vscode.Uri) => {\n        await globalScratchpadService.createScratchFileFromFile(fileUri);\n        webviewProvider.refresh();\n      }\n    ),\n\n    vscode.commands.registerCommand(\n      \"myscratchpad.createWorkspaceScratchFileFromFile\",\n      async (fileUri: vscode.Uri) => {\n        await workspaceScratchpadService.createScratchFileFromFile(fileUri);\n        webviewProvider.refresh();\n      }\n    )\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { IScratchFile } from \"../models/scratchFile\";\n\nexport class ScratchpadService {\n  constructor(\n    private scratchpadDir: string,\n    public readonly scope: string = \"global\"\n  ) {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Create a new scratch file from selected text\n   */\n  async createScratchFileFromSelection(): Promise<void> {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage(\"No active editor found\");\n      return;\n    }\n\n    const selection = editor.selection;\n    const selectedText = editor.document.getText(selection);\n\n    if (!selectedText.trim()) {\n      vscode.window.showErrorMessage(\"No text selected\");\n      return;\n    }\n\n    // Generate suggested filename based on current file\n    let suggestedName: string | undefined;\n    if (editor.document.fileName) {\n      const originalFileName = path.basename(editor.document.fileName);\n      const extension = path.extname(originalFileName);\n      const nameWithoutExt = path.basename(originalFileName, extension);\n      suggestedName = `${nameWithoutExt}_scratch${extension}`;\n    }\n\n    await this.createScratchFile(selectedText, suggestedName);\n  }\n\n  /**\n   * Create a new scratch file from an existing file\n   */\n  async createScratchFileFromFile(fileUri: vscode.Uri): Promise<void> {\n    try {\n      // Read the file content\n      const fileContent = await vscode.workspace.fs.readFile(fileUri);\n      const content = Buffer.from(fileContent).toString(\"utf8\");\n\n      // Generate suggested filename based on original file\n      const originalFileName = path.basename(fileUri.fsPath);\n      const extension = path.extname(originalFileName);\n      const nameWithoutExt = path.basename(originalFileName, extension);\n      const suggestedName = `${nameWithoutExt}_scratch${extension}`;\n\n      await this.createScratchFile(content, suggestedName);\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to read file: ${error}`);\n    }\n  }\n\n  /**\n   * Create a new scratch file\n   */\n  async createScratchFile(\n    initialContent?: string,\n    suggestedName?: string\n  ): Promise<void> {\n    // Ask for a name with extension\n    const defaultName = suggestedName || this.generateDefaultName();\n    const fileName = await vscode.window.showInputBox({\n      prompt:\n        \"Enter a name for your scratch file (include extension, e.g., note.txt, script.js, data.json)\",\n      value: defaultName,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        if (!value.includes(\".\")) {\n          return \"Please include a file extension (e.g., .txt, .js, .md)\";\n        }\n        const fullPath = path.join(this.scratchpadDir, value);\n        if (fs.existsSync(fullPath)) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!fileName) {\n      return; // User cancelled\n    }\n\n    // Extract extension from filename\n    const extension = path.extname(fileName).slice(1); // Remove the dot\n\n    // Create the file\n    const fullPath = path.join(this.scratchpadDir, fileName);\n    let content: string;\n\n    if (initialContent !== undefined) {\n      content = initialContent;\n    } else {\n      // Try to get clipboard content, fallback to default content\n      try {\n        const clipboardText = await vscode.env.clipboard.readText();\n        content = clipboardText.trim() || this.getInitialContent(extension);\n      } catch (error) {\n        content = this.getInitialContent(extension);\n      }\n    }\n\n    fs.writeFileSync(fullPath, content);\n\n    // Open the file\n    const document = await vscode.workspace.openTextDocument(fullPath);\n    await vscode.window.showTextDocument(document);\n  }\n\n  /**\n   * Delete a scratch file\n   */\n  async deleteScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const confirmation = await vscode.window.showWarningMessage(\n      `Are you sure you want to delete '${scratchFile.name}'?`,\n      { modal: true },\n      \"Delete\"\n    );\n\n    if (confirmation === \"Delete\") {\n      try {\n        fs.unlinkSync(scratchFile.path);\n        return true;\n      } catch (error) {\n        console.error(\"Failed to delete scratch file:\", error);\n        vscode.window.showErrorMessage(\n          `Failed to delete scratch file: ${error}`\n        );\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Rename a scratch file\n   */\n  async renameScratchFile(scratchFile: IScratchFile): Promise<boolean> {\n    const newName = await vscode.window.showInputBox({\n      prompt: \"Enter a new name for your scratch file (include extension, e.g., note.txt, script.js)\",\n      value: scratchFile.name,\n      validateInput: (value) => {\n        if (!value) {\n          return \"Name cannot be empty\";\n        }\n        if (!value.includes(\".\")) {\n          return \"Please include a file extension (e.g., .txt, .js, .md)\";\n        }\n        const fullPath = path.join(this.scratchpadDir, value);\n        if (fs.existsSync(fullPath) && fullPath !== scratchFile.path) {\n          return \"A file with this name already exists\";\n        }\n        return null;\n      },\n    });\n\n    if (!newName) {\n      return false; // User cancelled\n    }\n\n    const newPath = path.join(this.scratchpadDir, newName);\n\n    try {\n      fs.renameSync(scratchFile.path, newPath);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to rename scratch file:\", error);\n      vscode.window.showErrorMessage(`Failed to rename scratch file: ${error}`);\n      return false;\n    }\n  }\n\n  private generateDefaultName(): string {\n    const timestamp = new Date()\n      .toISOString()\n      .replace(/[-:]/g, \"\")\n      .replace(\"T\", \"_\")\n      .substring(0, 15);\n    return `scratch_${timestamp}.txt`;\n  }\n\n  private getInitialContent(extension: string): string {\n    const dateComment = `// Created on ${new Date().toLocaleString()}`;\n\n    switch (extension.toLowerCase()) {\n      case \"js\":\n        return `${dateComment}\\n\\n// JavaScript Scratch File\\nconsole.log('Hello, World!');\\n`;\n\n      case \"ts\":\n        return `${dateComment}\\n\\n// TypeScript Scratch File\\ninterface Person {\\n  name: string;\\n  age: number;\\n}\\n\\nconst greeting = (person: Person): string => {\\n  return \\`Hello, \\${person.name}!\\`;\\n};\\n\\nconsole.log(greeting({ name: 'World', age: 0 }));\\n`;\n\n      case \"html\":\n        return `<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta charset=\"UTF-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <title>Scratch</title>\\n  <style>\\n    body {\\n      font-family: Arial, sans-serif;\\n      margin: 2rem;\\n    }\\n  </style>\\n</head>\\n<body>\\n  <h1>HTML Scratch</h1>\\n  <p>Created on ${new Date().toLocaleString()}</p>\\n</body>\\n</html>\\n`;\n\n      case \"css\":\n        return `/* Created on ${new Date().toLocaleString()} */\\n\\n/* CSS Scratch File */\\nbody {\\n  font-family: Arial, sans-serif;\\n  margin: 0;\\n  padding: 20px;\\n  color: #333;\\n  background-color: #f5f5f5;\\n}\\n\\n.container {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n}\\n`;\n\n      case \"json\":\n        return `{\\n  \"created\": \"${new Date().toISOString()}\",\\n  \"name\": \"JSON Scratch\",\\n  \"items\": [\\n    {\\n      \"id\": 1,\\n      \"value\": \"Example\"\\n    }\\n  ]\\n}\\n`;\n\n      case \"md\":\n      case \"markdown\":\n        return `# Markdown Scratch\\n\\nCreated on ${new Date().toLocaleString()}\\n\\n## Heading\\n\\nSample text here.\\n\\n* List item 1\\n* List item 2\\n* List item 3\\n\\n## Code Example\\n\\n\\`\\`\\`javascript\\nconsole.log('Hello, World!');\\n\\`\\`\\`\\n`;\n\n      case \"sql\":\n        return `-- Created on ${new Date().toLocaleString()}\\n\\n-- SQL Scratch File\\nSELECT *\\nFROM users\\nWHERE active = true\\nORDER BY created_at DESC\\nLIMIT 10;\\n`;\n\n      default:\n        // For custom file types, provide a generic template with appropriate comment style\n        const commentChar = this.getCommentCharForExtension(extension);\n        return `${commentChar} Created on ${new Date().toLocaleString()}\\n\\n${commentChar} ${extension.toUpperCase()} Scratch File\\n\\n`;\n    }\n  }\n\n  private getCommentCharForExtension(extension: string): string {\n    // Common comment patterns for different file types\n    const commentMap: { [key: string]: string } = {\n      py: \"#\",\n      rb: \"#\",\n      sh: \"#\",\n      bash: \"#\",\n      r: \"#\",\n      pl: \"#\",\n      php: \"//\",\n      go: \"//\",\n      java: \"//\",\n      c: \"//\",\n      cpp: \"//\",\n      cs: \"//\",\n      swift: \"//\",\n      kt: \"//\",\n      scala: \"//\",\n      rust: \"//\",\n      rs: \"//\",\n      dart: \"//\",\n      lua: \"--\",\n      hs: \"--\",\n      elm: \"--\",\n      ex: \"#\",\n      exs: \"#\",\n      erl: \"%\",\n      clj: \";\",\n      lisp: \";\",\n      vim: '\"',\n      ini: \";\",\n      cfg: \"#\",\n      yaml: \"#\",\n      yml: \"#\",\n      toml: \"#\",\n      bat: \"REM\",\n      ps1: \"#\",\n    };\n\n    return commentMap[extension.toLowerCase()] || \"//\";\n  }\n}\n","module.exports = require(\"vscode\");","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { IScratchFile, getFileTypeIcon } from \"../models/scratchFile\";\nimport { ScratchpadService } from \"../services/scratchpadService\";\n\nexport class ScratchpadWebviewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = \"myscratchpad.scratchpadView\";\n\n  private _view?: vscode.WebviewView;\n  private _globalService: ScratchpadService;\n  private _workspaceService: ScratchpadService;\n  private _globalDir: string;\n  private _workspaceDir: string;\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri,\n    globalDir: string,\n    workspaceDir: string,\n    globalService: ScratchpadService,\n    workspaceService: ScratchpadService\n  ) {\n    this._globalDir = globalDir;\n    this._workspaceDir = workspaceDir;\n    this._globalService = globalService;\n    this._workspaceService = workspaceService;\n  }\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken\n  ): void {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    // Handle messages from the webview\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        case \"ready\":\n          // Webview is ready, send initial data\n          this.refresh();\n          break;\n        case \"createGlobalScratch\":\n          await this._globalService.createScratchFile();\n          this.refresh();\n          break;\n        case \"createWorkspaceScratch\":\n          await this._workspaceService.createScratchFile();\n          this.refresh();\n          break;\n        case \"openFile\":\n          const document = await vscode.workspace.openTextDocument(data.path);\n          await vscode.window.showTextDocument(document);\n          break;\n        case \"deleteFile\":\n          await this._deleteFile(data.file);\n          break;\n        case \"renameFile\":\n          await this._renameFile(data.file);\n          break;\n        case \"refresh\":\n          this.refresh();\n          break;\n        case \"search\":\n          this._handleSearch(data.query);\n          break;\n      }\n    });\n\n    // Also listen for document save events to ensure UI updates\n    const disposable = vscode.workspace.onDidSaveTextDocument((document) => {\n      const filePath = document.uri.fsPath;\n      // Check if the saved file is in one of our scratchpad directories\n      if (filePath.includes(this._globalDir) || filePath.includes(this._workspaceDir)) {\n        // Small delay to ensure file system has updated\n        setTimeout(() => this.refresh(), 50);\n      }\n    });\n\n    // Store the disposable for cleanup when webview is disposed\n    webviewView.onDidDispose(() => {\n      disposable.dispose();\n    });\n  }\n\n  private async _deleteFile(file: IScratchFile): Promise<void> {\n    const isWorkspaceFile = file.path.includes(\"workspaceScratchFiles\");\n    const service = isWorkspaceFile ? this._workspaceService : this._globalService;\n    \n    const success = await service.deleteScratchFile(file);\n    if (success) {\n      this.refresh();\n    }\n  }\n\n  private async _renameFile(file: IScratchFile): Promise<void> {\n    const isWorkspaceFile = file.path.includes(\"workspaceScratchFiles\");\n    const service = isWorkspaceFile ? this._workspaceService : this._globalService;\n    \n    const success = await service.renameScratchFile(file);\n    if (success) {\n      this.refresh();\n    }\n  }\n\n  private _handleSearch(query: string): void {\n    if (this._view) {\n      const { globalFiles, workspaceFiles } = this._getAllFiles();\n      const filteredGlobal = this._filterFiles(globalFiles, query);\n      const filteredWorkspace = this._filterFiles(workspaceFiles, query);\n      \n      this._view.webview.postMessage({\n        type: \"searchResults\",\n        globalFiles: filteredGlobal,\n        workspaceFiles: filteredWorkspace,\n        query\n      });\n    }\n  }\n\n  private _filterFiles(files: IScratchFile[], query: string): IScratchFile[] {\n    if (!query.trim()) {return files;}\n    \n    const lowercaseQuery = query.toLowerCase();\n    return files.filter(file => \n      file.name.toLowerCase().includes(lowercaseQuery) ||\n      file.extension.toLowerCase().includes(lowercaseQuery)\n    );\n  }\n\n  public refresh(): void {\n    if (this._view) {\n      const { globalFiles, workspaceFiles } = this._getAllFiles();\n      this._view.webview.postMessage({\n        type: \"refresh\",\n        globalFiles,\n        workspaceFiles\n      });\n    }\n  }\n\n  private _getAllFiles(): { globalFiles: IScratchFile[], workspaceFiles: IScratchFile[] } {\n    const globalFiles = this._getScratchFiles(this._globalDir);\n    const workspaceFiles = this._getScratchFiles(this._workspaceDir);\n    return { globalFiles, workspaceFiles };\n  }\n\n  private _getScratchFiles(scratchpadDir: string): IScratchFile[] {\n    try {\n      // Ensure directory exists\n      if (!fs.existsSync(scratchpadDir)) {\n        return [];\n      }\n\n      // Read files directly from the provided directory\n      const files = fs\n        .readdirSync(scratchpadDir)\n        .map((file) => path.join(scratchpadDir, file))\n        .filter((filePath) => {\n          try {\n            return fs.statSync(filePath).isFile();\n          } catch {\n            return false;\n          }\n        });\n\n      // Process all found files\n      return files\n        .map((filePath) => {\n          try {\n            const stats = fs.statSync(filePath);\n            const fileName = path.basename(filePath);\n            const extension = path.extname(fileName).slice(1);\n            const name = fileName;\n\n            const scratchFile: IScratchFile = {\n              name,\n              extension,\n              path: filePath,\n              created: stats.birthtime.getTime(),\n              lastModified: stats.mtime.getTime(),\n            };\n\n            return scratchFile;\n          } catch (error) {\n            console.error(`Error reading file ${filePath}:`, error);\n            return null;\n          }\n        })\n        .filter((file): file is IScratchFile => file !== null)\n        .sort((a, b) => b.lastModified - a.lastModified);\n    } catch (error) {\n      console.error(\"Error reading scratchpad directory:\", error);\n      return [];\n    }\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview): string {\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MyScratchPad</title>\n    <style>\n        body {\n            padding: 0;\n            margin: 0;\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            color: var(--vscode-foreground);\n            background-color: var(--vscode-sideBar-background);\n        }\n        \n        .container {\n            padding: 10px;\n        }\n        \n        .header {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            margin-bottom: 12px;\n            padding-bottom: 8px;\n            border-bottom: 1px solid var(--vscode-sideBar-border);\n        }\n        \n        .header h2 {\n            margin: 0;\n            font-size: 14px;\n            font-weight: 600;\n            flex: 1;\n        }\n        \n        .header-actions {\n            display: flex;\n            gap: 4px;\n        }\n        \n        .action-button {\n            background: transparent;\n            color: var(--vscode-foreground);\n            border: none;\n            border-radius: 2px;\n            padding: 6px 10px;\n            cursor: pointer;\n            font-size: 13px;\n            font-family: inherit;\n            font-weight: bold;\n        }\n        \n        .action-button:hover {\n            background: var(--vscode-toolbar-hoverBackground);\n        }\n        \n        .search-container {\n            margin-bottom: 12px;\n        }\n        \n        .search-input {\n            width: 100%;\n            padding: 6px 8px;\n            background: var(--vscode-input-background);\n            color: var(--vscode-input-foreground);\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 2px;\n            font-family: inherit;\n            font-size: 12px;\n            outline: none;\n        }\n        \n        .search-input:focus {\n            border-color: var(--vscode-focusBorder);\n        }\n        \n        .section {\n            margin-bottom: 16px;\n        }\n        \n        .section-header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-bottom: 6px;\n            padding: 4px 0;\n            cursor: pointer;\n            user-select: none;\n        }\n        \n        .section-header:hover {\n            background: var(--vscode-list-hoverBackground);\n            border-radius: 2px;\n        }\n        \n        .section-toggle {\n            font-size: 12px;\n            margin-right: 6px;\n            transition: transform 0.1s;\n        }\n        \n        .section-toggle.collapsed {\n            transform: rotate(-90deg);\n        }\n        \n        .section-content {\n            transition: all 0.2s ease;\n            overflow: hidden;\n        }\n        \n        .section-content.collapsed {\n            max-height: 0;\n            opacity: 0;\n        }\n        \n        .section-content.expanded {\n            max-height: 1000px;\n            opacity: 1;\n        }\n        \n        .section-title {\n            font-size: 11px;\n            font-weight: 600;\n            color: var(--vscode-foreground);\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .section-count {\n            font-size: 10px;\n            color: var(--vscode-descriptionForeground);\n            background: var(--vscode-badge-background);\n            color: var(--vscode-badge-foreground);\n            padding: 1px 6px;\n            border-radius: 8px;\n            min-width: 16px;\n            text-align: center;\n        }\n        \n        .file-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n        \n        .file-item {\n            display: flex;\n            align-items: center;\n            padding: 4px 8px;\n            border-radius: 2px;\n            cursor: pointer;\n            transition: background-color 0.1s;\n            position: relative;\n            margin-bottom: 1px;\n        }\n        \n        .file-item:hover {\n            background: var(--vscode-list-hoverBackground);\n        }\n        \n        .file-icon {\n            width: 16px;\n            height: 16px;\n            margin-right: 8px;\n            flex-shrink: 0;\n        }\n        \n        .file-info {\n            flex: 1;\n            min-width: 0;\n        }\n        \n        .file-name {\n            font-size: 12px;\n            color: var(--vscode-foreground);\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        \n        .file-meta {\n            font-size: 10px;\n            color: var(--vscode-descriptionForeground);\n            margin-top: 1px;\n        }\n        \n        .file-actions {\n            display: none;\n            gap: 2px;\n        }\n        \n        .file-item:hover .file-actions {\n            display: flex;\n        }\n        \n        .file-action {\n            background: none;\n            border: none;\n            color: var(--vscode-foreground);\n            cursor: pointer;\n            padding: 2px;\n            border-radius: 2px;\n            font-size: 11px;\n            width: 16px;\n            height: 16px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .file-action:hover {\n            background: var(--vscode-toolbar-hoverBackground);\n        }\n        \n        .empty-state {\n            text-align: center;\n            color: var(--vscode-descriptionForeground);\n            font-size: 11px;\n            padding: 20px;\n        }\n        \n        .loading {\n            text-align: center;\n            color: var(--vscode-descriptionForeground);\n            font-size: 11px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h2>MyScratchPad</h2>\n            <div class=\"header-actions\">\n                <button class=\"action-button\" onclick=\"refresh()\" title=\"Refresh\">🔄</button>\n            </div>\n        </div>\n        \n        <div class=\"search-container\">\n            <input type=\"text\" class=\"search-input\" placeholder=\"Search scratch files...\" oninput=\"handleSearch(this.value)\">\n        </div>\n        \n        <div class=\"section\">\n            <div class=\"section-header\" onclick=\"toggleSection('global')\">\n                <div style=\"display: flex; align-items: center;\">\n                    <span class=\"section-toggle collapsed\" id=\"global-toggle\">▶</span>\n                    <span class=\"section-title\">All Scratchpads</span>\n                </div>\n                <span class=\"section-count\" id=\"global-count\">0</span>\n            </div>\n            <div class=\"section-content collapsed\" id=\"global-content\">\n                <div style=\"margin-bottom: 8px;\">\n                    <button class=\"action-button\" onclick=\"createGlobalScratch()\" title=\"Create New Global Scratch File\">+ Global</button>\n                </div>\n                <ul class=\"file-list\" id=\"global-files\">\n                    <li class=\"loading\">Loading...</li>\n                </ul>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <div class=\"section-header\" onclick=\"toggleSection('workspace')\">\n                <div style=\"display: flex; align-items: center;\">\n                    <span class=\"section-toggle collapsed\" id=\"workspace-toggle\">▶</span>\n                    <span class=\"section-title\">Workspace Scratchpads</span>\n                </div>\n                <span class=\"section-count\" id=\"workspace-count\">0</span>\n            </div>\n            <div class=\"section-content collapsed\" id=\"workspace-content\">\n                <div style=\"margin-bottom: 8px;\">\n                    <button class=\"action-button\" onclick=\"createWorkspaceScratch()\" title=\"Create New Workspace Scratch File\">+ Workspace</button>\n                </div>\n                <ul class=\"file-list\" id=\"workspace-files\">\n                    <li class=\"loading\">Loading...</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        // State for section collapse/expand\n        let sectionStates = {\n            global: false,  // Start collapsed\n            workspace: false  // Start collapsed\n        };\n        \n        function createGlobalScratch() {\n            vscode.postMessage({ type: 'createGlobalScratch' });\n        }\n        \n        function createWorkspaceScratch() {\n            vscode.postMessage({ type: 'createWorkspaceScratch' });\n        }\n        \n        function openFile(path) {\n            vscode.postMessage({ type: 'openFile', path });\n        }\n        \n        function deleteFile(file) {\n            vscode.postMessage({ type: 'deleteFile', file });\n        }\n        \n        function renameFile(file) {\n            vscode.postMessage({ type: 'renameFile', file });\n        }\n        \n        function refresh() {\n            vscode.postMessage({ type: 'refresh' });\n        }\n        \n        function handleSearch(query) {\n            vscode.postMessage({ type: 'search', query });\n        }\n        \n        function toggleSection(sectionId) {\n            const content = document.getElementById(sectionId + '-content');\n            const toggle = document.getElementById(sectionId + '-toggle');\n            \n            sectionStates[sectionId] = !sectionStates[sectionId];\n            \n            if (sectionStates[sectionId]) {\n                content.classList.remove('collapsed');\n                content.classList.add('expanded');\n                toggle.classList.remove('collapsed');\n                toggle.textContent = '▼';\n            } else {\n                content.classList.remove('expanded');\n                content.classList.add('collapsed');\n                toggle.classList.add('collapsed');\n                toggle.textContent = '▶';\n            }\n        }\n        \n        function formatDate(timestamp) {\n            return new Date(timestamp).toLocaleDateString() + ' ' + \n                   new Date(timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        }\n        \n        function getFileIcon(extension) {\n            const icons = {\n                'js': '📄',\n                'ts': '📘',\n                'html': '🌐',\n                'css': '🎨',\n                'json': '📋',\n                'md': '📝',\n                'txt': '📄',\n                'py': '🐍',\n                'java': '☕',\n                'cpp': '⚙️',\n                'c': '⚙️',\n                'go': '🐹',\n                'rs': '🦀',\n                'php': '🐘',\n                'rb': '💎',\n                'swift': '🦉',\n                'kt': '🎯',\n                'dart': '🎯',\n                'vue': '💚',\n                'jsx': '⚛️',\n                'tsx': '⚛️'\n            };\n            return icons[extension] || '📄';\n        }\n        \n        function renderFileList(files, containerId) {\n            const container = document.getElementById(containerId);\n            const countElement = document.getElementById(containerId.replace('-files', '-count'));\n            \n            countElement.textContent = files.length;\n            \n            if (files.length === 0) {\n                container.innerHTML = '<li class=\"empty-state\">No files found</li>';\n                return;\n            }\n            \n            container.innerHTML = files.map(file => \\`\n                <li class=\"file-item\" onclick=\"openFile('\\${file.path}')\">\n                    <span class=\"file-icon\">\\${getFileIcon(file.extension)}</span>\n                    <div class=\"file-info\">\n                        <div class=\"file-name\" title=\"\\${file.name}\">\\${file.name}</div>\n                        <div class=\"file-meta\">Modified: \\${formatDate(file.lastModified)}</div>\n                    </div>\n                    <div class=\"file-actions\">\n                        <button class=\"file-action\" onclick=\"event.stopPropagation(); renameFile(\\${JSON.stringify(file).replace(/\"/g, '&quot;')})\" title=\"Rename\">✏️</button>\n                        <button class=\"file-action\" onclick=\"event.stopPropagation(); deleteFile(\\${JSON.stringify(file).replace(/\"/g, '&quot;')})\" title=\"Delete\">🗑️</button>\n                    </div>\n                </li>\n            \\`).join('');\n        }\n        \n        // Handle messages from the extension\n        window.addEventListener('message', event => {\n            const message = event.data;\n            \n            switch (message.type) {\n                case 'refresh':\n                    renderFileList(message.globalFiles, 'global-files');\n                    renderFileList(message.workspaceFiles, 'workspace-files');\n                    break;\n                case 'searchResults':\n                    renderFileList(message.globalFiles, 'global-files');\n                    renderFileList(message.workspaceFiles, 'workspace-files');\n                    break;\n            }\n        });\n        \n        // Send ready message when page is fully loaded\n        window.addEventListener('DOMContentLoaded', () => {\n            vscode.postMessage({ type: 'ready' });\n        });\n        \n        // Fallback in case DOMContentLoaded already fired\n        if (document.readyState === 'loading') {\n            // Still loading, wait for DOMContentLoaded\n        } else {\n            // Already loaded\n            vscode.postMessage({ type: 'ready' });\n        }\n    </script>\n</body>\n</html>`;\n  }\n}\n","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { IScratchFile, getFileTypeIcon } from \"./scratchFile\";\n\nexport class ScratchpadTreeItem extends vscode.TreeItem {\n  constructor(\n    public readonly scratchFile: IScratchFile,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState\n  ) {\n    super(scratchFile.name, collapsibleState);\n\n    // Set the appropriate icon\n    this.iconPath = new vscode.ThemeIcon(\n      getFileTypeIcon(scratchFile.extension)\n    );\n\n    // Command to execute when clicking on the tree item\n    this.command = {\n      command: \"vscode.open\",\n      title: \"Open Scratch File\",\n      arguments: [vscode.Uri.file(scratchFile.path)],\n    };\n\n    // Contextual data for commands\n    this.contextValue = \"scratchFile\";\n\n    // Set tooltip\n    const created = new Date(scratchFile.created).toLocaleString();\n    const modified = new Date(scratchFile.lastModified).toLocaleString();\n    this.tooltip = `${scratchFile.name}\\nCreated: ${created}\\nLast Modified: ${modified}`;\n\n    // Set description (file extension)\n    this.description = scratchFile.extension;\n  }\n}\n\nexport class ScratchpadProvider\n  implements vscode.TreeDataProvider<ScratchpadTreeItem>\n{\n  private _onDidChangeTreeData: vscode.EventEmitter<\n    ScratchpadTreeItem | undefined | null | void\n  > = new vscode.EventEmitter<ScratchpadTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<\n    ScratchpadTreeItem | undefined | null | void\n  > = this._onDidChangeTreeData.event;\n\n  constructor(\n    private scratchpadDir: string,\n    public readonly scope: string = \"global\"\n  ) {\n    // Ensure the scratchpad directory exists\n    if (!fs.existsSync(scratchpadDir)) {\n      fs.mkdirSync(scratchpadDir, { recursive: true });\n    }\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n\n  getTreeItem(element: ScratchpadTreeItem): vscode.TreeItem {\n    return element;\n  }\n\n  async getChildren(\n    element?: ScratchpadTreeItem\n  ): Promise<ScratchpadTreeItem[]> {\n    if (element) {\n      return []; // No children for leaf nodes\n    } else {\n      return this.getScratchFiles();\n    }\n  }\n\n  private getScratchFiles(): ScratchpadTreeItem[] {\n    try {\n      const ideNames = [\"Code\", \"Code - Insiders\", \"Cursor\", \"Windsurf\"];\n\n      const splitPart1 = this.scratchpadDir.split(\"/User/\")[0];\n      const splitPart2 = this.scratchpadDir.split(\"/User/\")[1];\n\n      // Construct the path for each IDE\n      const idePaths = ideNames.map((ideName) => {\n        // remove the \"ide path\" from part1\n        const newPart1 = splitPart1.split(\"/\").slice(0, -1).join(\"/\");\n        return path.join(newPart1, ideName, \"User\", splitPart2);\n      });\n\n      // Get all files from all IDE paths\n      const allFiles: string[] = [];\n      const uniqueFileNames = new Set<string>();\n\n      idePaths.forEach((idePath) => {\n        if (fs.existsSync(idePath)) {\n          const ideFiles = fs\n            .readdirSync(idePath)\n            .map((file) => path.join(idePath, file))\n            .filter((filePath) => !fs.statSync(filePath).isDirectory());\n\n          // Add files, filtering by unique file names\n          ideFiles.forEach((filePath) => {\n            const fileName = path.basename(filePath);\n            if (!uniqueFileNames.has(fileName)) {\n              uniqueFileNames.add(fileName);\n              allFiles.push(filePath);\n            }\n          });\n        }\n      });\n\n      // Process all found files\n      return allFiles\n        .map((filePath) => {\n          // Use fresh stats to ensure we get the latest modification time\n          const stats = fs.statSync(filePath);\n          const fileName = path.basename(filePath);\n          const extension = path.extname(fileName).slice(1); // Remove the dot\n          const name = fileName;\n\n          const scratchFile: IScratchFile = {\n            name,\n            extension,\n            path: filePath,\n            created: stats.birthtime.getTime(),\n            lastModified: stats.mtime.getTime(),\n          };\n\n          return new ScratchpadTreeItem(\n            scratchFile,\n            vscode.TreeItemCollapsibleState.None\n          );\n        })\n        .sort(\n          (a, b) => b.scratchFile.lastModified - a.scratchFile.lastModified\n        ); // Sort by last modified (newest first)\n    } catch (error) {\n      console.error(\"Error reading scratchpad directory:\", error);\n      return [];\n    }\n  }\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["FileTypeEnum","getFileTypeIcon","extension","JavaScript","TypeScript","HTML","CSS","JSON","Markdown","SQL","Text","getCustomFileIcon","py","rb","go","java","c","cpp","cs","php","swift","kt","rs","dart","lua","r","sh","bash","ps1","bat","yaml","yml","toml","ini","cfg","xml","vue","svelte","jsx","tsx","scss","sass","less","styl","coffee","elm","hs","clj","ex","erl","vim","dockerfile","tf","hcl","toLowerCase","context","console","log","globalScratchpadDir","path","join","globalStorageUri","fsPath","workspaceFolderPath","vscode","workspace","workspaceFolders","basename","uri","workspaceScratchpadDir","globalScratchpadProvider","ScratchpadProvider","globalScratchpadService","ScratchpadService","workspaceScratchpadProvider","workspaceScratchpadService","webviewProvider","ScratchpadWebviewProvider","extensionUri","subscriptions","push","window","registerWebviewViewProvider","viewType","setTimeout","globalWatcher","createFileSystemWatcher","RelativePattern","workspaceWatcher","refreshTimeout","refreshHandler","clearTimeout","refresh","onDidChange","onDidCreate","onDidDelete","documentSaveHandler","onDidSaveTextDocument","document","filePath","includes","error","commands","registerCommand","async","createScratchFile","item","treeItem","scratchFile","isWorkspaceFile","service","provider","deleteScratchFile","renameScratchFile","createScratchFileFromSelection","fileUri","createScratchFileFromFile","scratchpadDir","scope","constructor","fs","existsSync","mkdirSync","recursive","editor","activeTextEditor","showErrorMessage","selection","selectedText","getText","trim","suggestedName","fileName","originalFileName","extname","this","fileContent","readFile","content","Buffer","from","toString","initialContent","defaultName","generateDefaultName","showInputBox","prompt","value","validateInput","fullPath","slice","undefined","env","clipboard","readText","getInitialContent","writeFileSync","openTextDocument","showTextDocument","showWarningMessage","name","modal","unlinkSync","newName","newPath","renameSync","Date","toISOString","replace","substring","dateComment","toLocaleString","commentChar","getCommentCharForExtension","toUpperCase","pl","scala","rust","exs","lisp","module","exports","require","_extensionUri","static","_view","_globalService","_workspaceService","_globalDir","_workspaceDir","globalDir","workspaceDir","globalService","workspaceService","resolveWebviewView","webviewView","_token","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","data","type","_deleteFile","file","_renameFile","_handleSearch","query","disposable","onDidDispose","dispose","globalFiles","workspaceFiles","_getAllFiles","filteredGlobal","_filterFiles","filteredWorkspace","postMessage","files","lowercaseQuery","filter","_getScratchFiles","readdirSync","map","statSync","isFile","stats","created","birthtime","getTime","lastModified","mtime","sort","a","b","ScratchpadTreeItem","TreeItem","collapsibleState","super","iconPath","ThemeIcon","command","title","arguments","Uri","contextValue","modified","tooltip","description","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","fire","getTreeItem","element","getChildren","getScratchFiles","ideNames","splitPart1","split","splitPart2","idePaths","ideName","newPart1","allFiles","uniqueFileNames","Set","forEach","idePath","isDirectory","has","add","TreeItemCollapsibleState","None","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}